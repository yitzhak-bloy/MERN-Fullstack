{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05D9\\u05E6\\u05D7\\u05E7 \\u05D5\\u05DE\\u05DC\\u05DB\\u05D9\\\\Documents\\\\projects\\\\MERN-Fullstack-master\\\\client\\\\src\\\\user\\\\pages\\\\Users.js\";\nimport React, { useEffect, useState } from 'react';\nimport UsersList from '../components/UsersList';\nimport ErrorModel from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\n\nconst Users = () => {\n  const [loadedUsers, setLoadedUsers] = useState();\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const responseData = await sendRequest(process.env.REACT_APP_BACKEND_URL + '/users');\n        setLoadedUsers(responseData.users);\n      } catch (err) {}\n    };\n\n    fetchUsers();\n  }, [sendRequest]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModel, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  })), !isLoading && loadedUsers && /*#__PURE__*/React.createElement(UsersList, {\n    items: loadedUsers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 35\n    }\n  }));\n};\n\nexport default Users;","map":{"version":3,"sources":["C:/Users/יצחק ומלכי/Documents/projects/MERN-Fullstack-master/client/src/user/pages/Users.js"],"names":["React","useEffect","useState","UsersList","ErrorModel","LoadingSpinner","useHttpClient","Users","loadedUsers","setLoadedUsers","isLoading","error","sendRequest","clearError","fetchUsers","responseData","process","env","REACT_APP_BACKEND_URL","users","err"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,UAAP,MAAuB,+CAAvB;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,SAASC,aAAT,QAA8B,8BAA9B;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAClB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,EAA9C;AAEA,QAAM;AAACQ,IAAAA,SAAD;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA,WAAnB;AAAgCC,IAAAA;AAAhC,MAA8CP,aAAa,EAAjE;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,UAAU,GAAG,YAAY;AAC7B,UAAI;AACF,cAAMC,YAAY,GAAG,MAAMH,WAAW,CACpCI,OAAO,CAACC,GAAR,CAAYC,qBAAZ,GAAoC,QADA,CAAtC;AAIAT,QAAAA,cAAc,CAACM,YAAY,CAACI,KAAd,CAAd;AACD,OAND,CAME,OAAMC,GAAN,EAAW,CAAE;AAChB,KARD;;AASAN,IAAAA,UAAU;AACX,GAXQ,EAWN,CAACF,WAAD,CAXM,CAAT;AAaA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAED,KAAnB;AAA0B,IAAA,OAAO,EAAEE,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAECH,SAAS,iBACR;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAHF,EAOC,CAACA,SAAD,IAAcF,WAAd,iBAA6B,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEA,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAP9B,CADF;AAaD,CA/BD;;AAiCA,eAAeD,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nimport UsersList from '../components/UsersList';\r\nimport ErrorModel from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\n\r\nconst Users = () => {\r\n  const [loadedUsers, setLoadedUsers] = useState();\r\n\r\n  const {isLoading, error, sendRequest, clearError} = useHttpClient();\r\n\r\n  useEffect(() => {\r\n    const fetchUsers = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + '/users'\r\n        );\r\n        \r\n        setLoadedUsers(responseData.users);\r\n      } catch(err) {}\r\n    };\r\n    fetchUsers()\r\n  }, [sendRequest])\r\n\r\n  return (\r\n    <React.Fragment >\r\n    <ErrorModel error={error} onClear={clearError} />\r\n    {isLoading && (\r\n      <div className=\"center\" >\r\n        <LoadingSpinner />\r\n      </div>\r\n    )}\r\n    {!isLoading && loadedUsers && <UsersList items={loadedUsers} />}\r\n\r\n    </React.Fragment>\r\n  )\r\n\r\n};\r\n\r\nexport default Users;\r\n"]},"metadata":{},"sourceType":"module"}