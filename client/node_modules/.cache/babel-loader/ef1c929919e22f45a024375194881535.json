{"ast":null,"code":"import { useState, useCallback, useRef, useEffect } from 'react';\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n  const activeHttpRequests = useRef([]);\n  const sendRequset = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n    setIsLoading(true);\n    const httpAbortCtrl = new AbortController();\n    activeHttpRequests.current.push(httpAbortCtrl);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers,\n        signal: httpAbortCtrl.signal\n      });\n      const responseData = await response.json();\n\n      if (!response.ok) {\n        throw new Error(responseData.message);\n      }\n\n      setIsLoading(false);\n      return responseData;\n    } catch (err) {\n      setError(err.message || 'Something went wrong, please try again.');\n      setIsLoading(false);\n      throw err;\n    }\n  }, []);\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return () => {\n      activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\n    };\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendRequset,\n    clearError\n  };\n};","map":{"version":3,"sources":["C:/Users/איציק ומלכי/Desktop/מסמכים/ProjectsInGithub/MERN Fullstack/client/src/shared/hooks/http-hook.js"],"names":["useState","useCallback","useRef","useEffect","useHttpClient","isLoading","setIsLoading","error","setError","activeHttpRequests","sendRequset","url","method","body","headers","httpAbortCtrl","AbortController","current","push","response","fetch","signal","responseData","json","ok","Error","message","err","clearError","forEach","abortCtrl","abort"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,EAAwCC,SAAxC,QAAyD,OAAzD;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,EAAlC;AAEA,QAAMS,kBAAkB,GAAGP,MAAM,CAAC,EAAD,CAAjC;AAEA,QAAMQ,WAAW,GAAGT,WAAW,CAC7B,OAAOU,GAAP,EAAYC,MAAM,GAAG,KAArB,EAA4BC,IAAI,GAAG,IAAnC,EAAyCC,OAAO,GAAG,EAAnD,KAA2D;AAC3DR,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMS,aAAa,GAAG,IAAIC,eAAJ,EAAtB;AACAP,IAAAA,kBAAkB,CAACQ,OAAnB,CAA2BC,IAA3B,CAAgCH,aAAhC;;AAEE,QAAI;AACF,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,EAAM;AAChCC,QAAAA,MADgC;AAEhCC,QAAAA,IAFgC;AAGhCC,QAAAA,OAHgC;AAIhCO,QAAAA,MAAM,EAAEN,aAAa,CAACM;AAJU,OAAN,CAA5B;AAOA,YAAMC,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAA3B;;AAEA,UAAI,CAACJ,QAAQ,CAACK,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAvB,CAAN;AACD;;AAEDpB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,aAAOgB,YAAP;AACD,KAhBD,CAgBE,OAAOK,GAAP,EAAY;AACZnB,MAAAA,QAAQ,CAACmB,GAAG,CAACD,OAAJ,IAAe,yCAAhB,CAAR;AACApB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,YAAMqB,GAAN;AACD;AACF,GA3B4B,EA2B1B,EA3B0B,CAA/B;;AA6BE,QAAMC,UAAU,GAAG,MAAM;AACvBpB,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAFD;;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACXM,MAAAA,kBAAkB,CAACQ,OAAnB,CAA2BY,OAA3B,CAAmCC,SAAS,IAAIA,SAAS,CAACC,KAAV,EAAhD;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO;AAAE1B,IAAAA,SAAF;AAAaE,IAAAA,KAAb;AAAoBG,IAAAA,WAApB;AAAiCkB,IAAAA;AAAjC,GAAP;AACH,CA9CM","sourcesContent":["import { useState, useCallback, useRef, useEffect } from 'react';\r\n\r\nexport const useHttpClient = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState();\r\n\r\n  const activeHttpRequests = useRef([]);\r\n\r\n  const sendRequset = useCallback(\r\n    async (url, method = 'GET', body = null, headers = {} ) => {\r\n    setIsLoading(true);\r\n    const httpAbortCtrl = new AbortController();\r\n    activeHttpRequests.current.push(httpAbortCtrl);\r\n\r\n      try {\r\n        const response = await fetch(url, {\r\n          method,\r\n          body,\r\n          headers,\r\n          signal: httpAbortCtrl.signal\r\n        });\r\n\r\n        const responseData = await response.json();\r\n\r\n        if (!response.ok) {\r\n          throw new Error(responseData.message);\r\n        }\r\n        \r\n        setIsLoading(false);\r\n        return responseData;\r\n      } catch (err) {\r\n        setError(err.message || 'Something went wrong, please try again.');\r\n        setIsLoading(false);\r\n        throw err;\r\n      }\r\n    }, []);\r\n\r\n    const clearError = () => {\r\n      setError(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n      return () => {\r\n        activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort())\r\n      }\r\n    }, [])\r\n  \r\n    return { isLoading, error, sendRequset, clearError };\r\n};"]},"metadata":{},"sourceType":"module"}