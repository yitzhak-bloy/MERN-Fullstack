{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05D0\\u05D9\\u05E6\\u05D9\\u05E7 \\u05D5\\u05DE\\u05DC\\u05DB\\u05D9\\\\Desktop\\\\\\u05DE\\u05E1\\u05DE\\u05DB\\u05D9\\u05DD\\\\ProjectsInGithub\\\\MERN Fullstack\\\\client\\\\src\\\\user\\\\pages\\\\Users.js\";\nimport React, { useEffect, useState } from 'react';\nimport UsersList from '../components/UsersList';\nimport ErrorModel from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\n\nconst Users = () => {\n  const [loadedUsers, setLoadedUsers] = useState();\n  const {\n    isLoading,\n    error,\n    sendRequset,\n    clearError\n  } = useHttpClient();\n  useEffect(() => {\n    const sendRequest = async () => {\n      try {\n        await sendRequset('http://localhost:5000/api/users');\n      } catch (err) {}\n    };\n\n    sendRequest();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModel, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  })), !isLoading && loadedUsers && /*#__PURE__*/React.createElement(UsersList, {\n    items: loadedUsers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 35\n    }\n  }));\n};\n\nexport default Users;","map":{"version":3,"sources":["C:/Users/איציק ומלכי/Desktop/מסמכים/ProjectsInGithub/MERN Fullstack/client/src/user/pages/Users.js"],"names":["React","useEffect","useState","UsersList","ErrorModel","LoadingSpinner","useHttpClient","Users","loadedUsers","setLoadedUsers","isLoading","error","sendRequset","clearError","sendRequest","err"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,UAAP,MAAuB,+CAAvB;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,SAASC,aAAT,QAA8B,8BAA9B;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAClB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,EAA9C;AAEA,QAAM;AAACQ,IAAAA,SAAD;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA,WAAnB;AAAgCC,IAAAA;AAAhC,MAA8CP,aAAa,EAAjE;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,WAAW,GAAG,YAAY;AAC9B,UAAI;AACF,cAAMF,WAAW,CAAC,iCAAD,CAAjB;AACD,OAFD,CAEE,OAAMG,GAAN,EAAW,CAAE;AAChB,KAJD;;AAKAD,IAAAA,WAAW;AACZ,GAPQ,EAON,EAPM,CAAT;AASA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAEH,KAAnB;AAA0B,IAAA,OAAO,EAAEE,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAECH,SAAS,iBACR;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAHF,EAOC,CAACA,SAAD,IAAcF,WAAd,iBAA6B,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEA,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAP9B,CADF;AAaD,CA3BD;;AA6BA,eAAeD,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport UsersList from '../components/UsersList';\nimport ErrorModel from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\n\nconst Users = () => {\n  const [loadedUsers, setLoadedUsers] = useState();\n\n  const {isLoading, error, sendRequset, clearError} = useHttpClient();\n\n  useEffect(() => {\n    const sendRequest = async () => {\n      try {\n        await sendRequset('http://localhost:5000/api/users');\n      } catch(err) {}\n    };\n    sendRequest()\n  }, [])\n\n  return (\n    <React.Fragment >\n    <ErrorModel error={error} onClear={clearError} />\n    {isLoading && (\n      <div className=\"center\" >\n        <LoadingSpinner />\n      </div>\n    )}\n    {!isLoading && loadedUsers && <UsersList items={loadedUsers} />}\n\n    </React.Fragment>\n  )\n\n};\n\nexport default Users;\n"]},"metadata":{},"sourceType":"module"}