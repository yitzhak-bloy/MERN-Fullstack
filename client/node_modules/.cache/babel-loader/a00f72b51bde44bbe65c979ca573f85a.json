{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05D0\\u05D9\\u05E6\\u05D9\\u05E7 \\u05D5\\u05DE\\u05DC\\u05DB\\u05D9\\\\Desktop\\\\\\u05DE\\u05E1\\u05DE\\u05DB\\u05D9\\u05DD\\\\ProjectsInGithub\\\\MERN Fullstack\\\\src\\\\shared\\\\components\\\\FormElements\\\\Input.js\";\nimport React, { useReducer, useEffect } from 'react';\nimport { validate } from '../../util/validators';\nimport './Input.css';\n\nconst inputReduser = (state, action) => {\n  switch (action.type) {\n    case 'CHANGH':\n      return { ...state,\n        value: action.val,\n        isValide: validate(action.val, action.validators)\n      };\n\n    case 'TOUCH':\n      {\n        return { ...state,\n          isTouched: true\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReduser, {\n    value: props.value || '',\n    isTouched: false,\n    isValide: props.valid || false\n  });\n  const {\n    id,\n    onInput\n  } = props;\n  const {\n    value,\n    isValide\n  } = inputState;\n  useEffect(() => {\n    onInput(id, value, isValide);\n  }, [onInput, id, value, isValide]);\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGH',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  const element = props.element === 'input' ? /*#__PURE__*/React.createElement(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }) : /*#__PURE__*/React.createElement(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `form-control ${!inputState.isValide && inputState.isTouched && 'form-control--invalid'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, props.label), element, !inputState.isValide && inputState.isTouched && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 56\n    }\n  }, props.errorText));\n};\n\nexport default Input;","map":{"version":3,"sources":["C:/Users/איציק ומלכי/Desktop/מסמכים/ProjectsInGithub/MERN Fullstack/src/shared/components/FormElements/Input.js"],"names":["React","useReducer","useEffect","validate","inputReduser","state","action","type","value","val","isValide","validators","isTouched","Input","props","inputState","dispatch","valid","id","onInput","changeHandler","event","target","touchHandler","element","placeholder","rows","label","errorText"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect } from 'react';\n\nimport { validate } from '../../util/validators'\nimport './Input.css';\n\nconst inputReduser = (state, action) => {\n  switch (action.type) {\n    case 'CHANGH':\n      return {\n        ...state,\n        value: action.val,\n        isValide: validate(action.val, action.validators)\n      };\n    case 'TOUCH': {\n      return {\n        ...state,\n        isTouched: true\n      }\n    }\n    default:\n    return state; \n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReduser, {\n    value: props.value || '',\n    isTouched: false, \n    isValide: props.valid || false\n  });\n\n  const {id, onInput } = props;\n  const { value, isValide } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValide)\n  }, [onInput, id, value, isValide]);\n\n  const changeHandler = event => {\n    dispatch({ \n      type: 'CHANGH', \n      val: event.target.value, \n      validators: props.validators \n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  const element =\n    props.element === 'input' ? (\n      <input \n        id={props.id} \n        type={props.type} \n        placeholder={props.placeholder} \n        onChange={changeHandler} \n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea \n        id={props.id} \n        rows={props.rows || 3} \n        onChange={changeHandler} \n        onBlur={touchHandler}\n        value={inputState.value} \n      />\n    );\n\n  return (\n    <div className={`form-control ${!inputState.isValide && inputState.isTouched && \n      'form-control--invalid'}`}>\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValide && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}